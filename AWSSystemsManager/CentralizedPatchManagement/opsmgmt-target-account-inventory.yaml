#*
#* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#* SPDX-License-Identifier: MIT-0
#*
#* Permission is hereby granted, free of charge, to any person obtaining a copy of this
#* software and associated documentation files (the "Software"), to deal in the Software
#* without restriction, including without limitation the rights to use, copy, modify,
#* merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
#* permit persons to whom the Software is furnished to do so.
#*
#* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
#* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
#* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
#* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#*

#------------------------------------------------------------------------------
#
# Template: opsmgmt-target-account-inventory.yml
# Purpose:  Configures the target accounts for multi-account/multi-region inventory.
#
#
#------------------------------------------------------------------------------

AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to configure a target account for a scheduled multi-account and multi-region inventory.

#-----------------------------------------------------------
# Parameters
#-----------------------------------------------------------
Parameters :
  ExecutionLogsS3Bucket :
    Type : 'String'
    Description: 'Name of the S3 bucket that lives in the central account.'
    Default: ''
  ExecutionLogsS3BucketPrefix :
    Type : 'String'
    Description: 'Name of the prefix to use in the central account S3 bucket for inventory execution data.'
    Default: 'inventory-execution-logs'
  ManagedInstanceDataEncryptionKey:
    Type : 'String'
    Description: 'KMS Key used to encrypt S3 bucket.'
    Default: ''
  ResourceSyncS3Bucket :
    Type : 'String'
    Description: 'Name of the Resource Data Sync S3 bucket that lives in the central account.'
    Default: ''
  ResourceSyncS3BucketRegion :
    Type : 'String'
    Description: 'Region where the Resource Data Sync S3 bucket is located.'
    Default: ''
  ResourceDataSyncName :
    Type : 'String'
    Description: 'Name for the Resource Data Sync.'
    Default: 'InventoryData'

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Central Logging and Inventory"
        Parameters: 
          - ExecutionLogsS3Bucket
          - ExecutionLogsS3BucketPrefix
      - 
        Label: 
          default: "Inventory Resource Data Sync"
        Parameters: 
          - ResourceSyncS3Bucket
          - ResourceSyncS3BucketRegion
          - ResourceDataSyncName
          - ManagedInstanceDataEncryptionKey

Resources:
  #-------------------------------------------------
  # State Manager Association to gather Inventory data using AWS-GatherSoftwareInventory
  #-------------------------------------------------
  InventoryAssociation:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: AWS-QuickSetup-Inventory-Association
      Name: AWS-GatherSoftwareInventory
      ScheduleExpression: "rate(1 day)"
      OutputLocation:
        S3Location: 
          OutputS3BucketName: !Ref ExecutionLogsS3Bucket
          OutputS3KeyPrefix: !Join [ '', [!Ref ExecutionLogsS3BucketPrefix, '/', 'accountid=', !Ref 'AWS::AccountId', '/', 'region=', !Ref 'AWS::Region'] ]
      Targets:
      - Key: InstanceIds
        Values:
        - "*"
      Parameters: 
        applications: 
          - "Enabled"
        awsComponents: 
          - "Enabled"
        files:
          - ""
        networkConfig: 
          - "Enabled"
        windowsUpdates: 
          - "Enabled"
        instanceDetailedInformation: 
          - "Enabled"
        services: 
          - "Enabled"
        windowsRegistry:
          - ""
        windowsRoles: 
          - "Enabled"
        customInventory:
          - "Enabled"
        billingInfo: 
          - "Enabled"
          
  #-------------------------------------------------
  # Resource Data Sync to aggregate inventory, patching, and compliance data in the central S3 bucket
  #-------------------------------------------------
  ResourceDataSync:
    Type: AWS::SSM::ResourceDataSync
    Properties: 
      SyncName: !Ref ResourceDataSyncName
      S3Destination:
        BucketName: !Ref ResourceSyncS3Bucket
        BucketRegion: !Ref ResourceSyncS3BucketRegion
        KMSKeyArn: !Ref ManagedInstanceDataEncryptionKey
        SyncFormat: 'JsonSerDe'

  #-------------------------------------------------
  # Lambda for for gathering details about EC2 instances in the account/region and writing them to an S3 bucket as JSON objects.
  #-------------------------------------------------
  LambdaEC2CustomInventory:
    Type: AWS::Lambda::Function
    Properties:
      Description: Retrieves EC2 instance details and writes to S3 for inventory
      Handler: index.script_handler
      Role: !GetAtt LambdaCustomEC2InventoryRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import datetime
          ec2 = boto3.client('ec2')
          s3 = boto3.client('s3')
          def type_converter(obj):
              return str(obj)
          def script_handler(events, context):
              bucket=events['S3Bucket']
              prefix=events['S3Prefix']
              instance_ids=events.get('InstanceIds', None)
              errors =False               
              paginator = ec2.get_paginator('describe_instances')
              if instance_ids:
                  pages = paginator.paginate(
                      InstanceIds=instance_ids
                  )                
              else: 
                  pages = paginator.paginate(
                      MaxResults=1000
                  )
              for page in pages:
                  for reservation in page['Reservations']:
                      for instance in reservation['Instances']:
                          try:
                              print('Writing s3://{}/{}/{}.json'.format(bucket, prefix, instance['InstanceId']))
                              instance["CaptureTime"]=datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')
                              s3.put_object(
                                  Bucket=bucket,
                                  Key=prefix+'/'+instance['InstanceId']+'.json',
                                  Body=json.dumps(instance, default=type_converter),
                                  ACL='bucket-owner-full-control'
                              )
                          except Exception as e:
                              errors = True
                              last_error = e
                              print('Error writing inventory data: {}'.format(e))
              if errors:
                  raise Exception('Errors encountered, check execution logs. Last exception: {}'.format(last_error))
              return {}
      Runtime: python3.8
      Timeout: 600        
  
  #-------------------------------------------------
  # Event rule that triggers a periodic inventory for all instances
  #-------------------------------------------------
  CustomEC2InventoryScheduledEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule to invoke the Custom Inventory Lambda
      Name: Schedule-Trigger-Custom-EC2-Inventory-Lambda
      ScheduleExpression:
        rate(6 hours)
      State: ENABLED      
      Targets:
      - Arn: !Sub ${LambdaEC2CustomInventory.Arn}
        Id: "RunCustomEc2Inventory"
        Input: !Sub | 
          {
            "S3Bucket": ["${ResourceSyncS3Bucket}"],
            "S3Prefix": ["Custom:InstanceInformation/accountid={{global:ACCOUNT_ID}}/region={{global:REGION}}/resourcetype=Ec2InstanceInventory"]
          }
  PermissionForScheduledEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaEC2CustomInventory
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !Sub ${CustomEC2InventoryScheduledEventRule.Arn}

  #-------------------------------------------------
  # Event rule that triggers inventory on instance state change
  #-------------------------------------------------
  CustomEC2InventoryStateChangeEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "EventRule"
      EventPattern: 
        source: 
          - "aws.ec2"
        detail-type: 
          - "EC2 Instance State-change Notification"
        detail: 
          state: 
            - "stopped"
            - "running"
            - "terminated"
      State: "ENABLED"
      Targets: 
      - Arn: !Sub ${LambdaEC2CustomInventory.Arn}
        Id: "RunCustomEc2Inventory"
        InputTransformer: 
          InputPathsMap:
            instanceid: "$.detail.instance-id"
            state: "$.detail.state"
          InputTemplate: !Sub | 
            {
              "InstanceIds": ["<instanceid>"],
              "S3Bucket": "${ResourceSyncS3Bucket}",
              "S3Prefix": "Custom:InstanceInformation/accountid=${AWS::AccountId}/region=${AWS::Region}/resourcetype=Ec2InstanceInventory",
              "State": "<state>"
            }
  PermissionForStateChangeEventRuleToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaEC2CustomInventory
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !Sub ${CustomEC2InventoryStateChangeEventRule.Arn}            

  #-------------------------------------------------
  # The Lambda execution role that is used to perform the custom EC2 inventory
  #-------------------------------------------------
  LambdaCustomEC2InventoryRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'   
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole             
      Policies:
        - PolicyName: "ec2-describe-instances"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                Resource: "*"