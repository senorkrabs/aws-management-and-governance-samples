#*
#* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#* SPDX-License-Identifier: MIT-0
#*
#* Permission is hereby granted, free of charge, to any person obtaining a copy of this
#* software and associated documentation files (the "Software"), to deal in the Software
#* without restriction, including without limitation the rights to use, copy, modify,
#* merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
#* permit persons to whom the Software is furnished to do so.
#*
#* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
#* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
#* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
#* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#*

#------------------------------------------------------------------------------
#
# Template: opsmgmt-deploy-test-instances.yaml
# Purpose:  CloudFormation template to deploy test instances for patching using multi-account/multi-Region Automation
#
#
#------------------------------------------------------------------------------

AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to launch instances for Inventory, Patching, and Compliance demo environment for AWS Systems Manager

#-----------------------------------------------------------
# Parameters
#-----------------------------------------------------------
Parameters :
  LatestWindowsAmiId :
    # Use public Systems Manager Parameter
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base'
  LatestAmazonLinuxAmiId :
    # Use public Systems Manager Parameter
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2'
  LatestAmazonLinux2AmiId :
    # Use public Systems Manager Parameter
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'    
  InstanceType:    
    Type: String
    Description: The instance type to provision.
    AllowedValues: [t3.micro, t3.nano, t4g.nano, t3a.nano]
    Default: t3a.nano
  InstancesPerOS:
    Type: Number
    Description: The number of instances to create for each OS that will be deployed by the template. 
    Default: 3
  



Resources:

  #-------------------------------------------------
  # VPC and required resources to enable network connectivity to AWS Systems Manager
  #-------------------------------------------------
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: Automation-CF
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: Automation-CF
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Automation-CF
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Automation-CF
  RouteTableAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Automation-CF
  SubnetNetworkAclAssociationPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Automation patching test instances"
      GroupName: Automation-CF
      SecurityGroupEgress: 
        - IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: Automation-CF
      VpcId: !Ref VPC
  


  AmazonLinux2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        DisableApiTermination: false
        ImageId: !Ref LatestAmazonLinux2AmiId
        InstanceType: !Ref InstanceType
        NetworkInterfaces: 
          - AssociatePublicIpAddress: True
            DeviceIndex: 0
            SubnetId: 
              Ref: "SubnetPublic"      
            Groups: 
              - Ref: "InstanceSecurityGroup"   
        InstanceInitiatedShutdownBehavior: terminate
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName}-AmazonLinux2        
  AmazonLinux2ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref SubnetPublic
      LaunchTemplate:
        LaunchTemplateId: !Ref AmazonLinux2LaunchTemplate
        Version: !GetAtt AmazonLinux2LaunchTemplate.LatestVersionNumber
      MinSize: '0'
      MaxSize: !Ref InstancesPerOS
      DesiredCapacity: !Ref InstancesPerOS
      Tags:
        - Key: Name
          PropagateAtLaunch: True
          Value: !Sub ${AWS::StackName}-AmazonLinux2

  AmazonLinuxLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        DisableApiTermination: false
        ImageId: !Ref LatestAmazonLinuxAmiId
        InstanceType: !Ref InstanceType
        NetworkInterfaces: 
          - AssociatePublicIpAddress: True
            DeviceIndex: 0
            SubnetId: 
              Ref: "SubnetPublic"      
            Groups: 
              - Ref: "InstanceSecurityGroup"            
        InstanceInitiatedShutdownBehavior: terminate
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName}-AmazonLinux        
  AmazonLinuxASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref SubnetPublic
      LaunchTemplate:
        LaunchTemplateId: !Ref AmazonLinuxLaunchTemplate
        Version: !GetAtt AmazonLinuxLaunchTemplate.LatestVersionNumber
      MinSize: '0'
      MaxSize: !Ref InstancesPerOS
      DesiredCapacity: !Ref InstancesPerOS    
      Tags:
        - Key: Name
          PropagateAtLaunch: True
          Value:  !Sub ${AWS::StackName}-AmazonLinux

  WindowsLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        DisableApiTermination: false
        ImageId: !Ref LatestWindowsAmiId
        InstanceType: !Ref InstanceType
        NetworkInterfaces: 
          - AssociatePublicIpAddress: True
            DeviceIndex: 0
            SubnetId: 
              Ref: "SubnetPublic"      
            Groups: 
              - Ref: "InstanceSecurityGroup"                  
        InstanceInitiatedShutdownBehavior: terminate
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName}-Windows
  WindowsASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref SubnetPublic
      LaunchTemplate:
        LaunchTemplateId: !Ref WindowsLaunchTemplate
        Version: !GetAtt WindowsLaunchTemplate.LatestVersionNumber        
      MinSize: '0'
      MaxSize: !Ref InstancesPerOS
      DesiredCapacity: !Ref InstancesPerOS
      Tags:
        - Key: Name
          PropagateAtLaunch: True
          Value: !Sub ${AWS::StackName}-Windows

  LinuxEc2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmazonLinuxAmiId
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "InstanceSecurityGroup"
          SubnetId: 
            Ref: "SubnetPublic"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          shutdown -h +2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AmazonLinux-StoppedTest
  WindowsEc2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestWindowsAmiId
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "InstanceSecurityGroup"
          SubnetId: 
            Ref: "SubnetPublic"
      UserData:
        Fn::Base64: !Sub |
          <script>
          shutdown.exe -t 180 -f  
          </script>        
     
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Windows-StoppedTest